Làm thế nào để thêm muối vào mật khẩu
Việc băm mật khẩu trong cơ sở dữ liệu là bước đầu tiên tốt để ngăn chặn kẻ tấn 
công có thể sử dụng chúng nếu họ có quyền truy cập vào các mật khẩu. 
Tuy nhiên, đôi khi điều này chưa đủ, vì ngay cả các mật khẩu đã được băm cũng 
dễ bị tấn công bằng cách sử dụng rainbow table. Hơn nữa, nếu hai người dùng 
sử dụng cùng một mật khẩu, chúng sẽ băm thành cùng một giá trị. Do đó, nếu một 
kẻ tấn công có thể giải mã mật khẩu của một người dùng, anh ta có thể truy cập 
hơn một tài khoản người dùng.

Để ngăn chặn tấn công bằng rainbow table, bạn có thể sử dụng một kỹ thuật gọi 
là "muối" (salting). Để thêm muối cho một mật khẩu, bạn tạo một chuỗi ngẫu nhiên 
các ký tự khi mật khẩu được tạo ra. Sau đó, bạn thêm chuỗi muối vào cuối mật khẩu 
trước khi băm nó. Giá trị băm của mật khẩu cộng với muối được lưu trữ trong cơ 
sở dữ liệu như là mật khẩu. Bạn cũng lưu trữ giá trị muối trong cơ sở dữ liệu 
vì bạn sẽ cần nó sau khi người dùng cố gắng đăng nhập vào tài khoản của họ. 
Khi họ làm như vậy, bạn lấy mật khẩu mà người dùng đã nhập và thêm muối từ hàng 
cơ sở dữ liệu cho tài khoản người dùng đó. Sau đó, bạn băm mật khẩu cộng với 
giá trị muối và so sánh giá trị băm với giá trị băm được lưu trữ trong cơ sở dữ 
liệu.

Kỹ thuật này đảm bảo rằng các cuộc tấn công bằng rainbow table sẽ không hoạt động, 
vì ngay cả mật khẩu yếu sẽ được băm thành một giá trị hoàn toàn khác nhau nhờ 
vào muối. Hơn nữa, do mật khẩu được kết hợp với giá trị muối trước khi tạo giá 
trị băm, hai người dùng sử dụng cùng một mật khẩu sẽ không có cùng một giá trị 
băm vì muối của họ sẽ khác nhau. Điều này ngăn chặn kẻ tấn công khám phá ra rằng 
hai hoặc nhiều người dùng đang sử dụng cùng một mật khẩu.

Hình 17-5 hiển thị một phương thức có tên getSalt mà bạn có thể sử dụng để tạo 
muối ngẫu nhiên. Phương thức này sử dụng lớp SecureRandom, là một lớp con của 
lớp Random. Lớp này sử dụng lớp SecureRandom vì các giá trị ngẫu nhiên được 
tạo ra bởi lớp Random có thể dự đoán được. Vấn đề là lớp Random thường sử dụng 
thời gian hiện tại để khởi tạo số ngẫu nhiên. Kết quả là kẻ tấn công có thể dự 
đoán số ngẫu nhiên. Ngược lại, lớp SecureRandom thường sử dụng dữ liệu như tiếng 
ồn từ trình điều khiển thiết bị để khởi tạo số ngẫu nhiên của nó. Kết quả là 
việc biết giá trị khởi tạo để tạo số ngẫu nhiên là gần như không thể. Đối với 
mục đích mật mã hóa, bạn nên luôn sử dụng SecureRandom thay vì Random khi bạn 
cần một số ngẫu nhiên.

Hình này cũng hiển thị một phương thức có tên hashAndSaltPassword mà bạn có 
thể sử dụng để tạo mật khẩu được thêm muối và băm. Phương thức này bắt đầu bằng 
cách sử dụng phương thức getSalt để lấy chuỗi muối. Sau đó, nó thêm chuỗi muối 
vào chuỗi mật khẩu và chuyển chuỗi đó vào phương thức hashPassword được hiển 
thị trong hình trước.

Sau hai phương thức, hình này hiển thị một sơ đồ cơ sở dữ liệu cho bảng User 
mà bạn có thể sử dụng để lưu trữ mật khẩu được băm và muối. Hãy nhớ, bạn cần 
lưu trữ chuỗi muối. Nếu bạn không làm như vậy, bạn sẽ không thể cho phép người 
dùng đăng nhập sau này vì bạn sẽ không thể tái tạo chuỗi được sử dụng để tạo 
giá trị băm mật khẩu.

The classes used to salt a password
java.security.SecureRandom;
java.util.Random;
java.util.Base64;


A method for producing a salt value
public static String getSalt() {
    Random r = new SecureRandom();
    byte[] saltBytes = new byte[32];
    r.nextBytes(saltBytes);
    return Base64.getEncoder().encodeToString(saltBytes);
}


A method for combining the password and salt
public static String hashAndSaltPassword(String password) {
    String salt = getSalt();
    return hashPassword(password + salt);
}



A User table with salted passwords
table : User
column: UserId
column: HashedAndSaltedPassword
column: Salt


