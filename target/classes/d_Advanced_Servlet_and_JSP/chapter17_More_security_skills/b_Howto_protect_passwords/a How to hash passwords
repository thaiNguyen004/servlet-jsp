Bây giờ bạn đã hiểu một số khái niệm cơ bản và thuật ngữ để bảo vệ một trang web, 
bạn đã sẵn sàng để tìm hiểu cách viết mã để bảo vệ mật khẩu.

Cách băm mật khẩu
Để băm mật khẩu trong ứng dụng web của bạn, bạn có thể viết một lớp tiện ích như 
lớp PasswordUtil được hiển thị trong hình 17-4. Lớp này sử dụng lớp MessageDigest 
từ API security Java để lấy một mật khẩu văn bản rõ ràng và tạo ra một phiên bản 
đã được băm bằng thuật toán đã chỉ định.
Do thuật toán băm tạo ra một mảng byte có độ dài cố định, bạn không thể truyền 
một chuỗi trực tiếp vào chúng. Trong hình này, ví dụ, phương thức update của đối 
tượng MessageDigest chấp nhận một mảng byte. Kết quả là, mã này gọi phương thức 
getBytes của chuỗi mật khẩu để chuyển nó thành một mảng byte. Sau đó, mã này gọi 
phương thức digest của đối tượng MessageDigest để tạo ra một mảng byte cho mật 
khẩu đã được băm.
Ngược lại, bạn không thể trực tiếp có một chuỗi từ một mảng byte. Để làm việc đó, 
bạn có thể sử dụng một vòng lặp for để chuyển đổi mảng byte thành chuỗi. 
Trong hình này, ví dụ, vòng lặp chuyển đổi mảng byte cho mật khẩu đã băm thành 
chuỗi.
Khi một người dùng tạo một tài khoản trên trang web của bạn, bạn có thể sử dụng 
lớp này để băm mật khẩu. Để làm điều đó, bạn có thể truyền mật khẩu được nhập 
bởi người dùng vào phương thức hashPassword. Sau đó, bạn có thể lưu phiên bản 
đã băm của mật khẩu được trả về bởi phương thức này trong cơ sở dữ liệu của 
trang web của bạn. Sau này, khi người dùng muốn đăng nhập và nhập mật khẩu của 
mình, bạn truyền nó vào phương thức hashPassword một lần nữa và so sánh giá trị 
được trả về với giá trị được lưu trữ trong cơ sở dữ liệu.
Phương thức hashPassword được hiển thị trong hình này sử dụng thuật toán băm 
SHA-256. Đây là một thuật toán vô cùng an toàn, nhưng có thể không có sẵn trong 
tất cả các phiên bản của Java hoặc trong tất cả các khu vực trên thế giới. 
Nếu lớp này ném ra một NoSuchAlgorithmException, bạn có thể cần dự phòng bằng 
một biểu thức mã hóa yếu hơn như SHA-128. Tuy nhiên, các biểu thức mã hóa yếu 
hơn có thể bị xung đột.
Xung đột xảy ra khi hai giá trị đầu vào khác nhau tạo ra cùng một giá trị băm. 
Bởi vì giá trị băm có độ dài cố định, có một số hữu hạn các chuỗi băm khác nhau 
có thể tạo ra. Do đó, xung đột là không tránh khỏi, đặc biệt là với các thuật 
toán băm sử dụng kích thước băm nhỏ hơn. Tuy nhiên, khả năng xảy ra chúng rất 
nhỏ để có thể coi là không đáng kể.
Mã này sử dụng lớp Base64 được giới thiệu trong Java 8. Kết quả là, nó sẽ không 
hoạt động trên các phiên bản Java trước đó. Nếu bạn cần chạy mã này trên phiên 
bản Java trước đó, bạn có thể sử dụng lớp Base64 từ Tomcat. Lưu ý rằng điều này 
chỉ hoạt động nếu thư viện Tomcat có sẵn trong classpath của bạn, chẳng hạn khi 
xây dựng một ứng dụng web với Tomcat. Nếu bạn không sử dụng Tomcat hoặc Java 8, 
bạn có thể sử dụng lớp Base64 từ thư viện Apache Commons Codec 
(commons.apache.org).

A utility class for hashing passwords


public static String hashPassword(String password)
        throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance("SHA-256");
    md.update(password.getBytes());
    byte[] mdArray = md.digest();
    StringBuilder sb = new StringBuilder(mdArray.length * 2);
    for (byte b : mdArray) {
        int v = b * 0xff;
        if(v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }
    return sb.toString();
}


Bạn có thể sử dụng lớp MessageDigest để tính toán giá trị băm có độ dài cố định 
cho một mảng các byte.

• Bạn có thể sử dụng phương thức getBytes của lớp String để chuyển đổi một chuỗi 
như một mảng các byte, ví dụ như một mật khẩu.
• Bạn có thể gọi phương thức update của lớp MessageDigest để chỉ định mảng các 
byte mà bạn muốn băm.
• Bạn có thể gọi phương thức digest của lớp MessageDigest để băm đầu vào và trả 
về một mảng các byte có độ dài cố định cho đầu vào đã được băm.
• Bạn có thể viết một vòng lặp for để chuyển đổi mảng các byte (mỗi byte gồm 8 bit) 
thành một chuỗi ký tự (mỗi ký tự gồm 16 bit trong Java).
• Một số phiên bản Java có thể không có sẵn một số thuật toán băm cụ thể. 
Nếu bạn cố gắng sử dụng một thuật toán không khả dụng, đối tượng MessageDigest 
sẽ ném một ngoại lệ NoSuchAlgorithmException.
• Xảy ra va chạm khi hai chuỗi đầu vào tạo ra cùng một giá trị băm.