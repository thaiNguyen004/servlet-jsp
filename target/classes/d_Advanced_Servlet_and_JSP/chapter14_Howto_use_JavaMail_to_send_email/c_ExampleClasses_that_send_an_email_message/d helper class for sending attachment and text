
-- File servlet
package email;

import data.UserDB;
import entity.User;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import util.MailUtilOutLook;

import jakarta.mail.MessagingException;
import java.io.IOException;
import java.util.List;

@WebServlet(name = "emailList", urlPatterns = "/emailList")
public class EmailListServlet extends HttpServlet {
    private String message;
    private User user;
    private HttpSession session;

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        String url = "/index.jsp";
        session = req.getSession();

        String action = req.getParameter("action");
        if(action == null) {
            action = "join"; // default action
        }

        if(action.equals("add")) {
            String firstName = req.getParameter("firstName");
            String lastName = req.getParameter("lastName");
            String email = req.getParameter("email");
            User user = new User();

            user.setEmail(email);
            user.setFirstName(firstName);
            user.setLastName(lastName);

            if(UserDB.emailExists(email)) {
                message = "This email address already exists. <br>"
                        + "Please enter another email address.";
                url = "/index.jsp";
            } else {
                message = "";
                UserDB.insert(user);
                url = "/WEB-INF/thanks.jsp";
            }


            // send email to user
            String to = email;
            String from = "nguyennt2004@outlook.com";
            String subject = "Welcome to our email list";
            String body = "Dear " + firstName + ", \n\n"
                    + "<span style=\"color: blue;\">Thanks for joining our email list</span>. We'll make sure to send"
                    + "you announcements about new products and promotions.\n"
                    + "Have a great day and thanks again!\n\n"
                    + "Kelly Slivkoff\n"
                    + "Mike Murach & Associates";
            boolean isBodyHTML = false;
            try {
                MailUtilOutLook.sendMail(to, from, subject, body);
                message = "send mail success";
            } catch (MessagingException e) {
                String errorMessage =
                        "ERROR: Unable to send email. "
                                + "Check Tomcat logs for details."
                                + "NOTE: You may need to configure your system "
                                + "as described in chapter 14.<br>"
                                + "ERROR MESSAGE: " + e.getMessage();

                this.log("Unable to send email. \n"
                        + "Here is the mail you tried to send: "
                        + "===================================="
                        + "TO: " + email + "\n"
                        + "FROM: " + from + "\n"
                        + "SUBJECT: " + subject + "\n"
                        + "\n"
                        + body + "\n\n");
            }
            req.setAttribute("user", user);
            req.setAttribute("message", message);
        } else if (action.equals("remove")) {
            int id = Integer.valueOf(req.getParameter("id"));
            user = UserDB.selectUserById(id);
            if(UserDB.delete(user)) {
                message = "Delete row success";
            } else {
                message = "Delete fail";
            }
            List<User> list = UserDB.selectUserList();
            session.setAttribute("listEmail", list);
            req.setAttribute("message", message);
            url = "/index.jsp";
        }
        getServletContext()
                .getRequestDispatcher(url)
                .forward(req, resp);
    }
}



-- File util
package util;

import jakarta.activation.DataHandler;
import jakarta.activation.FileDataSource;
import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart;


import java.io.File;
import java.util.Properties;

public class MailUtilOutLook {
    public static void sendMail (String to, String from, String subject,
                String body) throws MessagingException {

        // 1 - get a mail session
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.office365.com");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.port", 587);
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.quitwait", "false");
        Session session = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("nguyennt2004@outlook.com",
                        "Ntph33935@");
            }
        });
        session.setDebug(true);

        // 2 - create a message
        Message message = new MimeMessage(session);
        message.setSubject(subject);

        MimeBodyPart textPart = new MimeBodyPart();
        textPart.setText(body, "utf-8", "html");

        File f = new File("E:\\SwingIcon\\BorutoImg\\IMG_2439.JPG");
        MimeBodyPart dataPart = new MimeBodyPart();
        dataPart.setDataHandler(new DataHandler(new FileDataSource(f)));
        dataPart.setFileName("sarada");

        // add tất cả dữ liệu bao gồm text và attachment vào đối tượng Multipart
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(textPart);
        multipart.addBodyPart(dataPart);

        // add vào message
        message.setContent(multipart);

        // 3 - address the message
        Address fromAddress = new InternetAddress(from);
        Address toAddress = new InternetAddress(to);
        message.setFrom(fromAddress);
        message.setRecipient(Message.RecipientType.CC, toAddress);

        // 4 - send the message
        Transport.send(message);
    }
}
