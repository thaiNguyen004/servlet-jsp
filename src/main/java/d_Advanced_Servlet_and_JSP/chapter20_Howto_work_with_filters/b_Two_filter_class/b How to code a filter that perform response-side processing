Cách viết một bộ lọc thực hiện xử lý phía phản hồi
Hình 20-5 cho thấy cách viết một bộ lọc có tên là LogResponseFilter thực hiện mã 
sau khi servlet yêu cầu được thực thi nhưng trước khi phản hồi được trả về cho 
khách hàng. Nếu bạn nghiên cứu mã cho bộ lọc này, bạn sẽ thấy rằng nó hoạt động 
tương tự như TestFilter 1 được giới thiệu trong hình 20-2. Tuy nhiên, có một số khác biệt.

Trước hết, lớp LogResponseFilter thực hiện toàn bộ xử lý sau khi servlet yêu cầu 
được thực thi. Nói cách khác, lớp này không thực hiện bất kỳ xử lý phía yêu cầu nào. 
Để làm điều đó, toàn bộ mã trong phương thức doFilter đặt sau câu lệnh gọi 
phương thức doFilter của đối tượng FilterChain.
Thứ hai, lớp này bao gồm loại nội dung của phản hồi trong tập tin nhật ký. 
Để làm điều này, mã này gọi phương thức getContentType của đối tượng 
HttpServletResponse để lấy loại MIME của phản hồi.

The code for a filter that performs response-side processing
package murach.filters;


package murach.filters;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class LogResponseFilter implements Filter {

    private FilterConfig filterConfig = null;

    @Override
    public void init(FilterConfig filterConfig) {
        this.filterConfig = filterConfig;
    }

    @Override
    public void doFilter(ServletRequest request,
            ServletResponse response,
            FilterChain chain) throws IOException, ServletException {
    
        chain.doFilter(request, response);
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        ServletContext sc = filterConfig.getServletContext();
        String logString = filterConfig.getFilterName() + " | ";
        logString += "Servlet path: " + httpRequest.getServletPath() + " | ";
        logString += "Content type: " + httpResponse.getContentType();
        sc.log(logString);
    }

    @Override
    public void destroy() {
        filterConfig = null;
    }
}